{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","height","background","paper","padding","spacing","margin","teksWithCheck","flexDirection","justifyContent","teksField","width","btnContainer","divider","hasil","color","alignItems","span","fontSize","App","classes","React","useState","id","nomor","checked","state","setState","setHasil","openSnackBar","setOpenSnackBar","message","setMessage","updateFieldChanged","index","e","newArr","target","type","value","calculate","opr","checkedObject","filter","length","total","forEach","i","parseInt","className","Paper","Fragment","map","obj","key","TextField","variant","onChange","Checkbox","inputProps","Button","size","button","onClick","Divider","Typography","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","event","reason","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4TAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,OAAQ,UACRC,WAAY,WAEdC,MAAO,CACLC,QAASN,EAAMO,QAAQ,KACvBC,OAAQ,QAEVC,cAAe,CACbH,QAASN,EAAMO,QAAQ,EAAG,GAC1BL,QAAS,OACTQ,cAAe,MACfC,eAAgB,gBAElBC,UAAW,CACTC,MAAOb,EAAMO,QAAQ,KAEvBO,aAAc,CACZZ,QAAS,OACTQ,cAAe,MACfC,eAAgB,eAChBL,QAASN,EAAMO,QAAQ,EAAG,IAE5BQ,QAAS,CACPP,OAAQR,EAAMO,QAAQ,EAAG,EAAG,EAAG,IAEjCS,MAAO,CACLC,MAAO,UACPf,QAAS,OACTQ,cAAe,MACfC,eAAgB,eAChBO,WAAY,YAEdC,KAAM,CACJC,SAAU,SACVH,MAAO,aAgLII,MA5Kf,WAEE,IAAMC,EAAUxB,IAFH,EAKayB,IAAMC,SAC9B,CACE,CAAEC,GAAI,IAAKC,MAAO,GAAIC,SAAS,GAC/B,CAAEF,GAAI,IAAKC,MAAO,GAAIC,SAAS,GAC/B,CAAEF,GAAI,IAAKC,MAAO,GAAIC,SAAS,KATtB,mBAKNC,EALM,KAKCC,EALD,OAcaN,IAAMC,SAAS,GAd5B,mBAcNR,EAdM,KAcCc,EAdD,OAiB2BP,IAAMC,UAAS,GAjB1C,mBAiBNO,EAjBM,KAiBQC,EAjBR,OAkBiBT,IAAMC,SAAS,IAlBhC,mBAkBNS,EAlBM,KAkBGC,EAlBH,KA2BPC,EAAqB,SAAAC,GAAK,OAAI,SAAAC,GAClC,IAAIC,EAAM,YAAOV,GACK,WAAlBS,EAAEE,OAAOC,KACXF,EAAOF,GAAOV,MAAQW,EAAEE,OAAOE,MAE/BH,EAAOF,GAAOT,QAAUU,EAAEE,OAAOZ,QAEnCE,EAASS,KAILI,EAAY,SAACC,GACjB,IAAMC,EAAgBhB,EAAMiB,QAAO,SAAAR,GAAC,OAAkB,IAAdA,EAAEV,WAC1C,GAAIiB,EAAcE,OAAS,EACzB,GAAIF,EAAcC,QAAO,SAAAR,GAAC,MAAgB,KAAZA,EAAEX,SAAcoB,OAAS,EACrDd,GAAgB,GAChBE,EAAW,mDACN,CACL,IAAIa,EAAQ,EACZ,OAAQJ,GACN,IAAK,IACHC,EAAcI,SAAQ,SAAAC,GAAC,OAAIF,GAASG,SAASD,EAAEvB,UAC/CI,EAASiB,GACT,MACF,IAAK,IACHH,EAAcI,SAAQ,SAAAC,GACN,IAAVF,EACFA,EAAQG,SAASN,EAAc,GAAGlB,OAElCqB,GAASG,SAASD,EAAEvB,UAGxBI,EAASiB,GACT,MACF,IAAK,IACHH,EAAcI,SAAQ,SAAAC,GACN,IAAVF,EACFA,EAAQG,SAASN,EAAc,GAAGlB,OAElCqB,GAASG,SAASD,EAAEvB,UAGxBI,EAASiB,GACT,MACF,IAAK,IACHH,EAAcI,SAAQ,SAAAC,GACN,IAAVF,EACFA,EAAQG,SAASN,EAAc,GAAGlB,OAElCqB,GAASG,SAASD,EAAEvB,UAGxBI,EAASiB,SAOff,GAAgB,GAChBE,EAAW,kDAKf,OACE,yBAAKiB,UAAW7B,EAAQrB,MACtB,kBAACmD,EAAA,EAAD,CAAOD,UAAW7B,EAAQjB,OACxB,kBAAC,IAAMgD,SAAP,KACGzB,EAAM0B,KAAI,SAACC,EAAKnB,GAAN,OACT,yBACEoB,IAAG,aAAQpB,GACXe,UAAW7B,EAAQb,eAEnB,kBAACgD,EAAA,EAAD,CACEN,UAAW7B,EAAQV,UACnB4C,IAAG,cAASpB,GACZI,KAAK,SACLkB,QAAQ,WACRC,SAAUxB,EAAmBC,KAE/B,kBAACwB,EAAA,EAAD,CACEJ,IAAG,eAAUpB,GACbuB,SAAUxB,EAAmBC,GAC7ByB,WAAY,CAAE,aAAc,6BAMpC,yBAAKV,UAAW7B,EAAQR,cACtB,kBAACgD,EAAA,EAAD,CACEJ,QAAQ,YACRzC,MAAM,UACN8C,KAAK,QACLZ,UAAW7B,EAAQ0C,OACnBC,QAAS,kBAAMvB,EAAU,OAL3B,KASA,kBAACoB,EAAA,EAAD,CACEJ,QAAQ,YACRzC,MAAM,UACN8C,KAAK,QACLZ,UAAW7B,EAAQ0C,OACnBC,QAAS,kBAAMvB,EAAU,OAL3B,KASA,kBAACoB,EAAA,EAAD,CACEJ,QAAQ,YACRzC,MAAM,UACN8C,KAAK,QACLZ,UAAW7B,EAAQ0C,OACnBC,QAAS,kBAAMvB,EAAU,OAL3B,KASA,kBAACoB,EAAA,EAAD,CACEJ,QAAQ,YACRzC,MAAM,UACN8C,KAAK,QACLZ,UAAW7B,EAAQ0C,OACnBC,QAAS,kBAAMvB,EAAU,OAL3B,MAUF,kBAACwB,EAAA,EAAD,CAASf,UAAW7B,EAAQP,UAC5B,kBAACoD,EAAA,EAAD,CAAYhB,UAAW7B,EAAQN,MAAO0C,QAAQ,MAA9C,WAA2D,0BAAMP,UAAW7B,EAAQH,MAAOH,KAE7F,kBAACoD,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,KAAMzC,EACN0C,iBAAkB,IAClBC,QAlJc,SAACC,EAAOC,GACX,cAAXA,GAGJ5C,GAAgB,IA+IZC,QAASA,MC7MG4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7D,c","file":"static/js/main.04fc6906.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    height: 'inherit',\n    background: '#f5f5f5'\n  },\n  paper: {\n    padding: theme.spacing(3.2),\n    margin: 'auto'\n  },\n  teksWithCheck: {\n    padding: theme.spacing(2, 0),\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  teksField: {\n    width: theme.spacing(38)\n  },\n  btnContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    padding: theme.spacing(3, 0),\n  },\n  divider: {\n    margin: theme.spacing(0, 0, 3, 0),\n  },\n  hasil: {\n    color: '#696969',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'baseline'\n  },\n  span: {\n    fontSize: '1.5rem',\n    color: 'black'\n  }\n}));\n\nfunction App() {\n  // style props\n  const classes = useStyles();\n\n  // dynamic input & checkbox\n  const [state, setState] = React.useState(\n    [\n      { id: '1', nomor: '', checked: false },\n      { id: '2', nomor: '', checked: false },\n      { id: '3', nomor: '', checked: false },\n    ]\n  );\n\n  // hasil props\n  const [hasil, setHasil] = React.useState(0);\n\n  // snackbar props\n  const [openSnackBar, setOpenSnackBar] = React.useState(false)\n  const [message, setMessage] = React.useState('')\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackBar(false);\n  };\n\n  // function untuk update state onChange\n  const updateFieldChanged = index => e => {\n    let newArr = [...state]; // copying the old state array\n    if (e.target.type === 'number') {\n      newArr[index].nomor = e.target.value;\n    } else {\n      newArr[index].checked = e.target.checked;\n    }\n    setState(newArr); // updated state\n  }\n\n  // function untuk menentukan hasil\n  const calculate = (opr) => {\n    const checkedObject = state.filter(e => e.checked === true);\n    if (checkedObject.length > 0) {\n      if (checkedObject.filter(e => e.nomor === '').length > 0) {\n        setOpenSnackBar(true);\n        setMessage('Masukan input untuk field yang tercentang !')\n      } else {\n        let total = 0;\n        switch (opr) {\n          case '+':\n            checkedObject.forEach(i => total += parseInt(i.nomor));\n            setHasil(total);\n            break;\n          case '-':\n            checkedObject.forEach(i => {\n              if (total === 0) {\n                total = parseInt(checkedObject[0].nomor)\n              } else {\n                total -= parseInt(i.nomor)\n              }\n            });\n            setHasil(total);\n            break;\n          case 'x':\n            checkedObject.forEach(i => {\n              if (total === 0) {\n                total = parseInt(checkedObject[0].nomor)\n              } else {\n                total *= parseInt(i.nomor)\n              }\n            });\n            setHasil(total);\n            break;\n          case '/':\n            checkedObject.forEach(i => {\n              if (total === 0) {\n                total = parseInt(checkedObject[0].nomor)\n              } else {\n                total /= parseInt(i.nomor)\n              }\n            });\n            setHasil(total);\n            break;\n          default:\n            break;\n        }\n      }\n    } else {\n      setOpenSnackBar(true);\n      setMessage('Input belum terpilih. Silahkan pilih centang.')\n    }\n  };\n\n  // render\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <React.Fragment>\n          {state.map((obj, index) =>\n            <div\n              key={`div${index}`}\n              className={classes.teksWithCheck}\n            >\n              <TextField\n                className={classes.teksField}\n                key={`teks${index}`}\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={updateFieldChanged(index)}\n              />\n              <Checkbox\n                key={`check${index}`}\n                onChange={updateFieldChanged(index)}\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\n              />\n            </div>\n          )\n          }\n        </React.Fragment>\n        <div className={classes.btnContainer}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            onClick={() => calculate('+')}\n          >\n            +\n        </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            onClick={() => calculate('-')}\n          >\n            -\n        </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            onClick={() => calculate('x')}\n          >\n            x\n        </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            onClick={() => calculate('/')}\n          >\n            /\n        </Button>\n        </div>\n        <Divider className={classes.divider} />\n        <Typography className={classes.hasil} variant=\"h6\">Hasil : <span className={classes.span}>{hasil}</span></Typography>\n      </Paper>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        open={openSnackBar}\n        autoHideDuration={1000}\n        onClose={handleClose}\n        message={message}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}